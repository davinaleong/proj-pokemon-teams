/* Headings */
@each $key, $heading in $headings {
    #{$key}, .#{$key} {
        font-family: map-get($heading, 'family');
        font-size: map-get($heading, 'size');
        font-weight: normal;
        margin-bottom: spacer('3');
    }
}

/* Links */
a, a:visited, a:focus {
    color: color('blue', 'base');
    text-decoration: none;
}

a:hover {
    color: color('blue', 'dark');
}

@each $key, $color in $colors {
    @if $key != 'gray' and $key != 'blue' and $key != 'black' and $key != 'white' {
        a.text-#{$key} {
            color: map-get($color, 'base');
        }
    
        a.text-#{$key}:hover {
            color: map-get($color, 'dark');
        }
    }
}

a.text-muted {
    color: color('gray', '500');
}

a.text-muted:hover {
    color: color('gray', '700');
}

/* Text Transformations */
strong, b, .text-bold {
    font-weight: bold;
}

em, .text-italic {
    font-style: italic;
}

small, .text-small {
    font-size: 80%;
}

code, .text-code {
    font-family: family('monospace');
}

@each $key, $family in $families {
    .font-#{$key} {
        font-family: $family;
    }
}

@each $key, $alignment in $alignments {
    .text-#{$alignment} {
        text-align: $alignment;
    }
}

@each $key, $color in $colors {
    @if $key != 'gray' and $key != 'blue' {
        .text-#{$key} {
            color: map-get($color, 'base');
        }
    
        .bg-#{$key} {
            color: map-get($color, 'font');
            background-color: map-get($color, 'base');
        }
    }
}

.text-muted {
    color: color('gray', '500');
    font-style: italic;
}

@each $key, $type in $types {
    .text-#{$key} {
        color: type($key, 'color');
    }

    a.text-#{$key} {
        color: type($key, 'color');
    }

    a.text-#{$key}:hover {
        color: darken(type($key, 'color'), $darken-amount);
    }
}